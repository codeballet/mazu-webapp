services:
  # web:
  #   build: ./app
  #   command: python manage.py runserver 0.0.0.0:8000
  #   # command: python -m gunicorn mazuproject.asgi:application -k uvicorn.workers.UvicornWorker --reload --bind 0.0.0.0:8000
  #   volumes:
  #     - ./app/:/usr/src/app/
  #   ports:
  #     - 8000:8000
  #   env_file:
  #     - ./.env.dev
  # healthcheck:
  #   test: ["CMD", "curl", "-f", "http://web:8000"]
  #   interval: 5s
  #   timeout: 3s
  #   retries: 5
  #   start_period: 10s

  vocoder:
    build: ./vocoder
    command: python vocoder.py
    depends_on:
      - speech
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./vocoder/:/app/
      - soundfiles:/soundfiles/

  speech:
    build: ./speech
    command: python speech.py
    depends_on:
      mazutalk:
        condition: service_started
    environment:
      - POSTGRES_NAME=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - ./speech/:/app/
      - soundfiles:/soundfiles/

  # notebooks:
  #   build: ./jupyter
  #   tty: true
  #   volumes:
  #     - ./jupyter/data/:/app/data
  #     - ./jupyter/notebooks/:/app/notebooks
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]
  #   ports:
  #     - "$JUPYTER_PORT:$JUPYTER_PORT"
  #     - "$TENSORBOARD_PORT:$TENSORBOARD_PORT"
  #   env_file:
  #     - ./.env
  #   entrypoint: jupyter lab --ip 0.0.0.0 --port=$JUPYTER_PORT --no-browser --allow-root

  mazusea:
    build: ./mazusea
    command: python mazusea.py
    env_file:
      - ./.env
    volumes:
      - ./mazusea/:/app/

  mazutalk:
    build: ./mazutalk
    depends_on:
      db:
        condition: service_started
      web:
        condition: service_started
      #   condition: service_healthy
    command: python mazutalk.py
    env_file:
      - ./.env
    volumes:
      - ./mazutalk/:/app

  connect:
    build: ./connect
    command: python connect.py
    env_file:
      - ./.env

  db:
    image: postgres:16.2-alpine
    volumes:
      - db:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/create_tables.sql
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
volumes:
  db:
  soundfiles:
